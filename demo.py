import streamlit as st
from openai import OpenAI
import os

openai_models = ["gpt-4o-mini", "gpt-4o", "gpt-4-turbo"]
deepseek_models = ["deepseek-chat", "deepseek-reasoner"]

def get_client(model):
    if model in openai_models:
        client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY", "<your OpenAI API key if not set as env var>"))
    elif model in deepseek_models:
        client = OpenAI(api_key=os.environ.get("DEEPSEEK_API_KEY", "<your DeepSeek API key if not set as env var>"), base_url="https://api.deepseek.com")
    else:
        raise ValueError("Unrecognized model")
    return client


def get_response(model, system_prompt, user_input):
    client = get_client(model)
    response = client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_input},
        ],
        temperature=1.3,
        stream=True
    )

    for chunk in response:
        content = chunk.choices[0].delta.content
        if content:
            yield content


st.title('GenAI Customer Reply')

st.sidebar.markdown("""
            The purpoes of this demo is to evaluate & compare the reply quality generated by LLMs. The default prompt is only there for reference, users can customize the prompt to obtain a more desiriable response.
            * [Prompt Engineering Guide](https://www.promptingguide.ai/)
            * [OpenAI Prompt Engineering Guide](https://platform.openai.com/docs/guides/prompt-engineering)
""")

long_prompt = """You are a friendly, professional, and inclusive cafeteria manager responsible for responding to customer comments and feedback. Your responses should be warm, polite, and empathetic while maintaining a formal and professional tone. Ensure your replies reflect a commitment to customer satisfaction, food quality, and service excellence.

Guidelines for Customer Responses:
1.	Acknowledge and Appreciate – Start by thanking the customer for their feedback, regardless of whether it is positive, neutral, or negative. Express appreciation for their time and input.
2.	Empathize and Validate – Show understanding and acknowledge their experience or concern. If applicable, reassure them that their opinion matters.
3.	Address the Concern (if applicable) – Provide a clear and concise response to the issue raised. If corrective action is possible, mention the steps being taken or offer a solution.
4.	Stay Positive and Solution-Oriented – Use constructive language and focus on improvements rather than dwelling on negatives. If the feedback is positive, reinforce appreciation and highlight any upcoming enhancements.
5.	Maintain Professionalism and Friendliness – Keep the tone respectful, polite, and professional while ensuring warmth and inclusivity. Avoid defensive or dismissive language.
6.	Encourage Further Engagement – If appropriate, invite the customer to reach out for further discussion, offer contact details, or encourage future visits to foster a stronger relationship.
7.	Personalize When Possible – If the customer has mentioned specific details (e.g., a favorite dish, an experience with staff), personalize the response to make it more engaging.

Example Responses:
	•	Positive Feedback:
“Thank you so much for your kind words! We are delighted to hear that you enjoyed your meal and had a great experience. Our team works hard to provide excellent service and delicious food, and your feedback truly means a lot. We look forward to serving you again soon!”
	•	Neutral/Constructive Feedback:
“Thank you for sharing your thoughts with us. We appreciate your input and always strive to improve. We will take your feedback into consideration as we continue refining our menu and service. If you have any further suggestions, we would love to hear them!”
	•	Negative Feedback (Service Issue):
“We sincerely apologize for your recent experience and appreciate you bringing this to our attention. Providing excellent service is our priority, and we regret that we fell short. We are addressing this internally to ensure a better experience moving forward. Please don’t hesitate to reach out if you’d like to discuss this further—we value your feedback and hope to serve you again soon.”
    """

prompt_dict = {
        "default": "You are the manager of a corporate or school cafeterias, you receive customer comments feedbacks frequently. Please use humane, friendly, polite, inclusive and formal writing to reply to your customers.",
        "candidate1": long_prompt
        }

with st.expander("Customize the prompt"):
    options = ["default", "candidate1"]
    prompt_selection = st.segmented_control(
        "prompts", options, default="default", selection_mode="single"
    )
    prompt = st.text_area(
        "Edit Prompt",
        prompt_dict[prompt_selection] if prompt_selection else "",
        key="prompt",
    )
    st.write(f"{len(prompt)} characters.")


st.subheader(":thought_balloon: Voice from your customer")
comment = st.text_area(
    "Feedback",
    "The food served in the cafeteria is consistently cold and tasteless. The ingredients don’t seem fresh, and the meals lack variety. I often find myself bringing food from home instead.",
    key="comment"
)

with st.sidebar.expander("Advanced"):
    model = st.selectbox(
            label="Select model",
            options=openai_models + deepseek_models,
            index=0,
            # placeholder="gpt-4o-mini",
            )
    n_examples = st.number_input(
            label="Number of examples 1-10",
            min_value=1,
            max_value=10,
            step=1,
            )
if comment and st.button("Generate Response"):
    if prompt:
        st.subheader(":robot_face: :green[AI Assisted Reply]")
        for i in range(n_examples):
            st.divider()
            st.write_stream(get_response(model, prompt, comment))
    else:
        st.warning("Please specify your prompt", icon="⚠️")


# generated_reply = comment[::-1]

# if generated_reply:
#     st.subheader("AI Assisted Reply")
#     st.write(generated_reply)



        # background-color: white;
        # padding: 10px;
        # text-align: center;
        # box-shadow: 0px -2px 5px rgba(0,0,0,0.1);

# st.markdown(
#     """
#     <style>
#     .bottom-container {
#         position: fixed;
#         bottom: 0;
#         left: 0;
#         width: 100%;
#         text-align: center;
#         padding: 10px;
#     }
#     </style>
#     <div class="bottom-container">
#         <p> This is a fixed footer component</p>
#     </div>
#     """,
#     unsafe_allow_html=True
# )
